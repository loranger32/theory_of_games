[1mdiff --git a/lib/game_theory.rb b/lib/game_theory.rb[m
[1mindex 218b4a2..f411017 100755[m
[1m--- a/lib/game_theory.rb[m
[1m+++ b/lib/game_theory.rb[m
[36m@@ -11,11 +11,10 @@[m [mrequire_relative 'game_theory/player_factory_class'[m
 require_relative 'game_theory/earning_engine_class'[m
 require_relative 'game_theory/two_player_logic_class'[m
 require_relative 'game_theory/turn_engine_class'[m
[31m-require_relative 'game_theory/decision_maker_class'[m
 require_relative 'game_theory/reporter_class'[m
 [m
 # Generate Players - Will take options in the future[m
[31m-players = PlayerFactory.new.generate_players[m
[32m+[m[32mplayers = PlayerFactory.new(Player).generate_players[m
 [m
 # Rules for granting earnings - acts on players instances[m
 earning_engine = EarningEngine.new(players)[m
[1mdiff --git a/lib/game_theory/game_loop_class.rb b/lib/game_theory/game_loop_class.rb[m
[1mindex 1bab33f..af30711 100644[m
[1m--- a/lib/game_theory/game_loop_class.rb[m
[1m+++ b/lib/game_theory/game_loop_class.rb[m
[36m@@ -14,6 +14,7 @@[m [mclass GameLoop[m
       display_end_of_turns[m
       play_again?[m
     end[m
[32m+[m[32m    binding.pry[m
   end[m
 [m
   private[m
[1mdiff --git a/lib/game_theory/player_class.rb b/lib/game_theory/player_class.rb[m
[1mindex 7f2cfe1..13cf7f9 100644[m
[1m--- a/lib/game_theory/player_class.rb[m
[1m+++ b/lib/game_theory/player_class.rb[m
[36m@@ -57,15 +57,3 @@[m [mclass Player[m
     rand(0..1) == 0 ? :betrays : :cooperates[m
   end[m
 end[m
[31m-[m
[31m-[m
[31m-good_guy = Player.new(name: 'Good guy', behavior: :cooperator)[m
[31m-bad_guy = Player.new(name: 'Bad guy', behavior: :traitor)[m
[31m-[m
[31m-good_guy.play_move[m
[31m-bad_guy.play_move[m
[31m-[m
[31m-p good_guy.cooperates?[m
[31m-p bad_guy.betrays?[m
[31m-[m
[31m-[m
[1mdiff --git a/lib/game_theory/player_factory_class.rb b/lib/game_theory/player_factory_class.rb[m
[1mindex bc12da5..b6b7709 100644[m
[1m--- a/lib/game_theory/player_factory_class.rb[m
[1m+++ b/lib/game_theory/player_factory_class.rb[m
[36m@@ -1,4 +1,11 @@[m
 class PlayerFactory[m
[32m+[m[32m  def initialize(player_class)[m
[32m+[m[32m    @player_class = player_class[m
[32m+[m[32m  end[m
[32m+[m
   def generate_players[m
[32m+[m[32m    @player1 = @player_class.new[m
[32m+[m[32m    @player2 = @player_class.new[m
[32m+[m[32m    [@player1, @player2][m
   end[m
 end[m
[1mdiff --git a/lib/game_theory/turn_engine_class.rb b/lib/game_theory/turn_engine_class.rb[m
[1mindex 023c08f..4ccd266 100644[m
[1m--- a/lib/game_theory/turn_engine_class.rb[m
[1m+++ b/lib/game_theory/turn_engine_class.rb[m
[36m@@ -9,7 +9,7 @@[m [mclass TurnEngine[m
 [m
   def play_turn[m
     @players.each { |player| player.play_move }[m
[31m-    game_logic.process_moves(@players)[m
[32m+[m[32m    game_logic.process_moves[m
     reset_players_move[m
   end[m
 [m
[1mdiff --git a/spec/turn_engine_test.rb b/spec/turn_engine_test.rb[m
[1mindex 822ed8a..4d4abf2 100644[m
[1m--- a/spec/turn_engine_test.rb[m
[1m+++ b/spec/turn_engine_test.rb[m
[36m@@ -5,10 +5,25 @@[m [mclass GameTurnEngineInitialisationTest < Minitest::Test[m
   def setup[m
     @player1 = Minitest::Mock.new[m
     @player2 = Minitest::Mock.new[m
[32m+[m[32m    @players = [@player1, @player2][m
     @game_logic = Minitest::Mock.new[m
   end[m
 [m
[31m-  def test_it_take_one_array_as_unique_argument_test[m
[32m+[m[32m  def test_it_can_be_initialized_with_one_array_of_players_and_the_game_logic[m
     assert_silent { TurnEngine.new([@player1, @player2], @game_logic) }[m
   end[m
[32m+[m
[32m+[m[32m  def test_play_turn_actually_play_the_whole_turn[m
[32m+[m[32m    @players.each do |player|[m
[32m+[m[32m      player.expect(:play_move, nil)[m
[32m+[m[32m      player.expect(:reset_move, nil)[m
[32m+[m[32m    end[m
[32m+[m
[32m+[m[32m    @game_logic.expect(:process_moves, nil)[m
[32m+[m
[32m+[m[32m    turn_engine = TurnEngine.new([@player1, @player2], @game_logic)[m
[32m+[m[32m    turn_engine.play_turn[m
[32m+[m[32m    @players.each(&:verify)[m
[32m+[m[32m    @game_logic.verify[m
[32m+[m[32m  end[m
 end[m
